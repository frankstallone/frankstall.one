---
interface Props {
  /** The current number of likes for this post */
  count: number
  /** The unique identifier for the post */
  slug: string
}

const { count, slug } = Astro.props
---

<post-likes
  id="like-button"
  data-initial={count}
  data-slug={slug}
  class="inline-flex align-center justify-center rounded-3xl bg-gray-600 text-step-00 text-gray-100"
>
  <button
    aria-label="Click to like this post"
    class="bg-transparent border-none flex justify-center align-center px-xs py-2xs"
  >
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 512 512"
      fill="currentColor"
      class="self-center"
    >
      <title>Like button icon</title>
      <path
        d="M240 67.7V32h96V67.7c0 38.1-9 75.1-25.8 108.3H464h48v96H496v80H472v72H448v56H400 280 265.5l-12.1-8.1-72-48L160 409.7V384 320 224 200.9l18-14.4 7.9-6.4c34.2-27.3 54-68.7 54-112.4zM128 192V480H0V192H128z"
      ></path></svg
    ><span class="ml-2xs font-display font-bold"
      ><div class="sr-only">This post's current likes:</div>0</span
    ></button
  >
</post-likes>

<script>
  interface LikeResponse {
    liked: boolean
  }

  interface APIError {
    message: string
    code?: string
  }

  class Likes extends HTMLElement {
    private readonly likeComponent: HTMLElement
    private count: number
    private readonly slug: string
    private readonly likeButton: HTMLButtonElement
    private readonly countSpan: HTMLSpanElement
    private liked: boolean
    private isUpdating: boolean

    constructor() {
      super()
      this.likeComponent = this

      const initial = this.dataset.initial
      const slug = this.dataset.slug

      if (!initial) {
        throw new Error('Likes component: data-initial attribute is required')
      }
      if (!slug) {
        throw new Error('Likes component: data-slug attribute is required')
      }

      this.count = Number(initial)
      if (isNaN(this.count)) {
        throw new Error('Likes component: data-initial must be a valid number')
      }

      this.slug = slug
      const button = this.querySelector('button')
      const span = this.querySelector('span')

      if (!button || !span) {
        throw new Error('Likes component: Required elements not found')
      }

      this.likeButton = button
      this.countSpan = span
      this.liked = false
      this.isUpdating = false
    }

    connectedCallback() {
      // Set the initial count
      if (this.count !== 0) {
        this.countSpan.textContent = this.count.toString()
      }
      // Update the liked state
      this.updateLikedState()
      // Add event listener to the button
      this.addLikeButtonEventListener()
    }

    private addLikeButtonEventListener() {
      this.likeButton.addEventListener('click', async (e) => {
        e.preventDefault()

        // Prevent multiple rapid clicks
        if (this.isUpdating) {
          return
        }

        try {
          this.isUpdating = true
          this.likeButton.disabled = true
          await this.handleLikeClick()
        } catch (error) {
          console.error('Error handling like click:', error)
          this.showError('Failed to update like status. Please try again.')
        } finally {
          this.isUpdating = false
          this.likeButton.disabled = false
        }
      })
    }

    private async handleLikeClick() {
      // Store initial state for rollback
      const initialCount = this.count
      const wasLiked = this.liked

      // Optimistic update
      this.liked = !this.liked
      this.count = this.liked ? this.count + 1 : this.count - 1
      this.updateUI()

      try {
        const response = await this.sendLikeRequest()

        if (!response.ok) {
          const error = (await response.json()) as APIError
          throw new Error(error.message || 'Server error')
        }
      } catch (error) {
        // Revert on error
        this.count = initialCount
        this.liked = wasLiked
        this.updateUI()
        throw error // Re-throw for the caller
      }
    }

    private async sendLikeRequest(): Promise<Response> {
      return fetch(`/api/like-post/${this.slug}/`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ slug: this.slug }),
      })
    }

    private updateUI() {
      if (this.liked) {
        this.likeComponent.classList.add('bg-indigo-vivid-600')
        this.likeComponent.classList.remove('bg-gray-600')
        this.likeButton.setAttribute(
          'aria-label',
          `Thank you! Click to unlike this post. This post has been liked ${this.count} times.`
        )
      } else {
        this.likeComponent.classList.remove('bg-indigo-vivid-600')
        this.likeComponent.classList.add('bg-gray-600')
        this.likeButton.setAttribute(
          'aria-label',
          `Click to like this post. This post has been liked ${this.count} times.`
        )
      }
      this.countSpan.textContent = this.count.toString()
    }

    private async updateLikedState() {
      try {
        const response = await fetch(`/api/like-post/${this.slug}/`, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
          },
        })

        if (!response.ok) {
          throw new Error('Failed to fetch like state')
        }

        const { liked } = (await response.json()) as LikeResponse
        this.liked = liked
        this.updateUI()
      } catch (error) {
        console.error('Error fetching like state:', error)
        this.showError('Failed to load like status')
      }
    }

    private showError(message: string) {
      console.error(message)
      // Simple
      this.likeButton.classList.add('error')
      setTimeout(() => {
        this.likeButton.classList.remove('error')
      }, 2000)
    }
  }

  customElements.define('post-likes', Likes)
</script>

<style>
  .error {
    animation: shake 0.5s cubic-bezier(0.36, 0.07, 0.19, 0.97) both;
    transform: translate3d(0, 0, 0);
  }

  @keyframes shake {
    10%,
    90% {
      transform: translate3d(-1px, 0, 0);
    }
    20%,
    80% {
      transform: translate3d(2px, 0, 0);
    }
    30%,
    50%,
    70% {
      transform: translate3d(-4px, 0, 0);
    }
    40%,
    60% {
      transform: translate3d(4px, 0, 0);
    }
  }
</style>
