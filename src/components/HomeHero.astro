---
import Header from './Header.astro'

import { getImage } from 'astro:assets'
import background from '@assets/frank-stallone-home-header-blank.png'

const optimizedBackground = await getImage({ src: background })
---

<div
  id="hero"
  style={`--cover-padding: 0; background: center / cover no-repeat var(--color-gray-1400) url(${optimizedBackground.src}); `}
  aria-label="Hero section"
>
  <Header />
  <div
    class="box flex flex-col justify-center flow prose bg-transparent text-gray-100 h-[30vh] md:h-[50vh]"
  >
    <h1
      class="text-[10vw] uppercase font-bold leading-flat bg-gradient-to-r from-indigo-vivid-100 to-indigo-vivid-600 bg-clip-text text-transparent"
    >
      <span class="creative">Creative</span>
      <br />
      <em class="empowerment">empowerment</em>
    </h1>
  </div>
</div>

<script>
  import { gsap } from 'gsap'
  import SplitText from 'gsap/SplitText'
  let mm = gsap.matchMedia()
  const color = gsap.utils.interpolate('#f0f0ff', '#8289ff')

  gsap.registerPlugin(SplitText)

  mm.add('(prefers-reduced-motion: no-preference)', async () => {
    await document.fonts.ready
    SplitText.create('.creative', {
      type: 'chars',
      autoStart: true,
      charsClass: 'creative++',
      onSplit(self) {
        // Colorize the characters
        gsap.set(self.chars, {
          color: (index, _, targets) => color(index / (targets.length - 1)),
        })
        // Animate the characters
        gsap.from(self.chars, {
          yPercent: 'random([-50, 50])',
          xPercent: 'random([-100, 100])',
          rotate: 'random(-30, 30)',
          autoAlpha: 0,
          stagger: {
            amount: 0.75,
            from: 'random',
          },
        })
      },
    })
    SplitText.create('.empowerment', {
      type: 'chars words',
      autoStart: true,
      charsClass: 'empower++',
      onSplit(self) {
        // Colorize the characters
        gsap.set(self.chars, {
          color: (index, _, targets) => color(index / (targets.length - 1)),
        })
        // Animate the word
        gsap.from(self.words, {
          scale: 0.75,
          autoAlpha: 0,
          delay: 0.5,
        })
      },
    })
  })
</script>
