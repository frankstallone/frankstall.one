---
import InnerLayout from '../../layouts/InnerLayout.astro';
import { Picture } from 'astro:assets';
import PhoneInput from '@ui/PhoneInput';
import research from '@assets/klaviyo/klaviyo-asecnt-design-system-phone-input-research.png';
import ideation from '@assets/klaviyo/klaviyo-asecnt-design-system-phone-input-ideation.png';
import field from '@assets/klaviyo/klaviyo-asecnt-design-system-field.png';
const canonicalURL = new URL(Astro.url.pathname, Astro.site);
---

<InnerLayout
  subtitle="Creating 'just' another phone number input for Klaviyo's Ascent Design System subscribers."
  meta={{
    title: 'Klaviyo Ascent Design System: Phone input',
    description:
      'Case study of the Ascent Design System Phone number input for Klaviyo, from the portfolio of Frank Stallone',
    canonicalURL: canonicalURL.href,
    image: `/media/portfolio/kl-og-image.png`,
  }}
>
  <section class="flow" id="main">
    <div class="region">
      <div
        class="wrapper flex flex-col md:grid flow flow-space-l"
        data-layout="twelfths"
      >
        <video
          autoplay
          loop
          muted
          playsinline
          class="min-w-zero max-w-full md:row-start-3 md:row-span-2 md:col-span-8 md:col-start-1"
        >
          <source
            src="/media/klaviyo/Klaviyo-Phone-Input-Variants-web.webm"
            type="video/webm"
          />
          <source
            src="/media/klaviyo/Klaviyo-Phone-Input-Variants-web.mp4"
            type="video/mp4"
          />
        </video>
        <div
          class="md:row-start-1 md:row-span-6 md:col-start-7 md:col-span-7 box flow flow-space-xs border-solid border-b-2 border-x-0 border-t-0 text-gold-vivid-800 bg-gold-100 border-gold-700 z-10"
        >
          <h2 class="mt-zero">The Challenge</h2>
          <p>
            What could be more simple than creating a Phone Number component?
            Constructing a simple yet powerful component that was ready for the
            future of the Klaviyo app, and work well for the marketing team.
          </p>
          <p>
            The challenge here was to consider all of the possible ways to
            layout an input, in the context of others, that gave the user
            affordances to choose their country, and handling validation for
            such a renown complex component.
          </p>
          <p>
            Through discussions with the stakeholders I was able to acquire some
            insight into previously used solutions by the marketing team, where
            they wanted to go, and pulled that all into my research document.
            There were a few stand out features that came became primary
            priorities:
          </p>
          <ul>
            <li>
              Representing different countries, with a default based on the
              app's locale
            </li>
            <li>
              Phone number formatting of the input mask and placeholder based on
              the country
            </li>
            <li>Consistent look and feel with the rest of the Klaviyo app</li>
          </ul>
          <p>
            Getting these primary considerations together, and in alignment with
            stakeholders, meant the product and marketing teams would be able to
            use this single component for their use cases.
          </p>
        </div>
      </div>
    </div>
    <div class="region">
      <div
        class="wrapper flex flex-col md:grid flow flow-space-l"
        data-layout="twelfths"
      >
        <div
          class="md:row-start-2 md:row-span-4 md:col-start-2 md:col-span-8 box flow flow-space-xs w-fit border-solid border-b-2 border-x-0 border-t-0 text-gold-vivid-800 bg-gold-100 border-gold-700 z-10"
        >
          <h2 class="mt-zero">Discovery and Collaboration</h2>
          <p>
            This particular journey begins with an extensive list of prioritized
            components and the organizations larger initiative to enter the
            international space. We had an existing component that was similar,
            the Number Input, however the variations for this input were growing
            on it's own without putting in logic for phone numbers.
          </p>
          <p>
            In talking to a few different team leaders I created a list of
            stakeholders who had a vested interest in the results. These
            stakeholders included Directors of Product Design, and Engineering
            Managers on both the app team, and marketing team. I also consulted
            with other Lead Product Designers who had related expertise. I
            scheduled interviews with these individuals to inform them on my
            process, gather any requirements or requests to create user stories,
            and let them know how I would be communicating progress through
            Jira.
          </p>
          <p>
            While waiting for those meetings, I starting a FigJam pulling in
            existing references from our Number Input and commenting on
            similarities and differences. I then performed cursory research into
            what other design systems were doing for a Phone Number input, also
            searching a few design system communities. I laughed &mdash; I had
            personal experience designing and developing the Roll by ADP Phone
            Number React input, and saw the same complex logic discussions and
            trade offs in older online community threads. Specifically, I
            remember dealing with the definitive phone number formatting and
            parsing library, developed by Google. It's JavaScript port is 8MB
            which drastically affects web app performance.
          </p>
        </div>
        <Picture
          src={research}
          widths={[300, 800, 2000, research.width]}
          sizes={`(max-width: 300px) 300px, (max-width: 800px) 800px, (max-width: 1600px) 2000px, ${research.width}px`}
          pictureAttributes={{
            class:
              'object-contain h-full w-full md:row-start-1 md:row-span-6 md:col-span-12 md:col-start-1',
          }}
          class={'object-contain h-full w-full md:row-start-1 md:row-span-6 md:col-span-12 md:col-start-1'}
          alt="Research in FigJam for the phone number input"
          formats={['avif', 'webp']}
          loading="lazy"
        />
      </div>
    </div>
    <div class="region">
      <div class="wrapper flex flex-col md:grid" data-layout="twelfths">
        <div
          class="md:row-start-1 md:row-span-8 md:col-start-6 md:col-span-6 box flow flow-space-xs border-solid border-b-2 border-x-0 border-t-0 text-gold-vivid-800 bg-gold-100 border-gold-700 z-10"
        >
          <h2 class="mt-zero">Ideation and Design</h2>
          <p>
            Taking a step back to look at all of the data and information
            collected from stakeholders, existing component methodology, and
            research guidelines and UX from other design systems I'm armed with
            everything I need to make decisions about how this component will
            look and feel. This is where the whiteboard or sketchpad comes in
            handy. I'll take themes that start to develop and sketch them out.
          </p>
          <p>
            At the same time, I am writing a template we created for the design
            system team to organize our documentation of the component. This
            includes:
          </p>
          <ul>
            <li>
              Best practices
              <ul>
                <li>What to use</li>
                <li>When not to use</li>
              </ul>
            </li>
            <li>Related components</li>
            <li>Internal components (that will be used in this component)</li>
            <li>Rules</li>
            <li>
              Behaviors
              <ul>
                <li>
                  States: Describing each state the component can be in, and the
                  expectations
                </li>
                <li>
                  Interactions: Describing the mouse, keyboard, and screen
                  reader expectations
                </li>
              </ul>
            </li>
            <li>
              Content
              <ul>
                <li>
                  Working with the Content design team to align with best
                  practices, and set expectations
                </li>
              </ul>
            </li>
          </ul>
          <p>
            During our regular stand ups with the team, we critique everyones
            work. This is where I bring up to the team my progress, and discuss
            best practice decisions. After those critiques, I will update the
            stakeholders to ensure they are on board, with the right level of
            detail. For instance, a Product Owners may only need a written
            bulleted list of what's been done, and whether we're on track.
            Product Designers and Engineers who are subscribers to the design
            system, and have a vested interest in the component may get that
            same list with visuals, or links directly to Figma for them to
            provide feedback.
          </p>
          <p>
            Let's take a moment to talk about critiques. I have successfully
            used a few techniques throughout my career that were embedded since
            design school around critiques. No matter what your title is, I
            always keep the conversation related to the ideas and decisions that
            brought us to those ideas. Doing this keeps us on track with the
            objectives shaped from the start, and dissolves any potential
            emotional consequences. It's never about who is doing the work, it's
            about the work and whether that meets the needs of our users and the
            business.
          </p>
        </div>
        <Picture
          src={ideation}
          widths={[300, 800, 2000, ideation.width]}
          sizes={`(max-width: 300px) 300px, (max-width: 800px) 800px, (max-width: 1600px) 2000px, ${ideation.width}px`}
          pictureAttributes={{
            class:
              'object-contain h-full w-full md:row-start-2 md:row-span-4 md:col-span-10 md:col-start-1',
          }}
          class={'object-contain h-full w-full md:row-start-2 md:row-span-4 md:col-span-10 md:col-start-1'}
          alt="Iterations of the phone number input"
          formats={['avif', 'webp']}
          loading="lazy"
        />
      </div>
    </div>
    <div class="region">
      <div
        class="wrapper flex flex-col md:grid flow flow-space-l"
        data-layout="twelfths"
      >
        <div
          class="md:row-start-1 md:row-span-4 md:col-start-1 md:col-span-6 box flow flow-space-xs border-solid border-b-2 border-x-0 border-t-0 text-gold-vivid-800 bg-gold-100 border-gold-700 z-10"
        >
          <h2 class="mt-zero">Refinement &amp; Results</h2>
          <p>
            Since Figma is the tool of choice these days, it's worth noting that
            I will start designing without aligning Figma Styles or Variants for
            speed, and to explore any newer innovation a component may need.
            During the refinement stages, I start to align closer to existing
            component design principals that have been set by the team. In this
            particular case, the Phone input is similar to the Text input, a
            form component. That means sitting it in a Field component to see
            how it works with other inputs, labels, descriptions, and error
            messages. I'll also start applying any relevant Styles and replacing
            any parts with existing internal components that are already solving
            that problem.
          </p>
          <Picture
            src={field}
            widths={[300, 800, 2000, field.width]}
            sizes={`(max-width: 300px) 300px, (max-width: 800px) 800px, (max-width: 1600px) 2000px, ${field.width}px`}
            pictureAttributes={{
              class: 'object-contain h-auto w-auto',
            }}
            class={'object-contain h-auto w-auto'}
            alt="Phone input component in a Field component showing variants"
            formats={['avif', 'webp']}
            loading="lazy"
          />
          <p>
            Coming back to the documentation for the component, this is where I
            add:
          </p>
          <ul>
            <li>
              Visual representations of what to do, and what not to do for the
              Rules
            </li>
            <li>
              Variants: Relevant states and how they look compared to base, and
              any relevant data
            </li>
            <li>
              Anatomy: One of the visuals we use on the documentation site, and
              in the Figma component itself is a section with redlines to
              clearly articulate naming. This helps for describing and talking
              about the decisions made about each of these parts that make the
              whole
            </li>
          </ul>
          <p>
            Finally we clean up the Figma file ensuring actual components are in
            the right page, and that there is a documentation page with examples
            of all the relevant states and considerations.
          </p>
          <p>
            The results are a well thought out component with all the design,
            development, content, and accessibility considerations that make our
            teams more efficient and effective at their job. We'll ensure we've
            updated the Figma library changelog accordingly, and broadcast to
            all stakeholders via email newsletters, Slack groups, DM's and
            relevant calls.
          </p>
        </div>
        <video
          autoplay
          loop
          muted
          playsinline
          class="min-w-zero max-w-full md:row-start-2 md:row-span-5 md:col-start-8 md:col-span-4"
        >
          <source
            src="/media/klaviyo/Klaviyo-Phone-Input-Testing-web.webm"
            type="video/webm"
          />
          <source
            src="/media/klaviyo/Klaviyo-Phone-Input-Testing-web.mp4"
            type="video/mp4"
          />
        </video>
      </div>
    </div>
    <div class="region wrapper">
      <div
        class="box mx-auto w-fit flow prose border-solid border-b-2 border-x-0 border-t-0 text-gold-vivid-800 bg-gold-100 border-gold-700"
      >
        <h2>React component</h2>
        <div>
          <PhoneInput client:idle />
        </div>
        <p>
          What does this look like as a React component? Functionally, we have
          this <code>PhoneInput</code>
          <a
            href="https://github.com/frankstallone/frankstall.one/blob/main/src/components/ui/PhoneInput.tsx"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 496 512"
              class="icon"
              fill="currentColor"
              ><path
                d="M165.9 397.4c0 2-2.3 3.6-5.2 3.6-3.3 .3-5.6-1.3-5.6-3.6 0-2 2.3-3.6 5.2-3.6 3-.3 5.6 1.3 5.6 3.6zm-31.1-4.5c-.7 2 1.3 4.3 4.3 4.9 2.6 1 5.6 0 6.2-2s-1.3-4.3-4.3-5.2c-2.6-.7-5.5 .3-6.2 2.3zm44.2-1.7c-2.9 .7-4.9 2.6-4.6 4.9 .3 2 2.9 3.3 5.9 2.6 2.9-.7 4.9-2.6 4.6-4.6-.3-1.9-3-3.2-5.9-2.9zM244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 20-5.6 41.5-8.5 62.8-8.5s42.8 2.9 62.8 8.5c0 0 48.1-33.6 69-27 13.7 34.7 5.2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8zM97.2 352.9c-1.3 1-1 3.3 .7 5.2 1.6 1.6 3.9 2.3 5.2 1 1.3-1 1-3.3-.7-5.2-1.6-1.6-3.9-2.3-5.2-1zm-10.8-8.1c-.7 1.3 .3 2.9 2.3 3.9 1.6 1 3.6 .7 4.3-.7 .7-1.3-.3-2.9-2.3-3.9-2-.6-3.6-.3-4.3 .7zm32.4 35.6c-1.6 1.3-1 4.3 1.3 6.2 2.3 2.3 5.2 2.6 6.5 1 1.3-1.3 .7-4.3-1.3-6.2-2.2-2.3-5.2-2.6-6.5-1zm-11.4-14.7c-1.6 1-1.6 3.6 0 5.9 1.6 2.3 4.3 3.3 5.6 2.3 1.6-1.3 1.6-3.9 0-6.2-1.4-2.3-4-3.3-5.6-2z"
              ></path></svg
            > working correctly
          </a> with some caveats. The world is imperfect. When thinking about that
          conversation between design and development, compromises need to occur.
        </p>
        <p>
          Input masking is a good example. The design called for the country
          code to be in place. Doing so is more of a challenge. Another user
          experience consideration is what happens to numbers already input,
          after the <code>CountrySelector</code>
          <a
            href="https://github.com/frankstallone/frankstall.one/blob/main/src/components/ui/CountrySelector.tsx"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 496 512"
              class="icon"
              fill="currentColor"
              ><path
                d="M165.9 397.4c0 2-2.3 3.6-5.2 3.6-3.3 .3-5.6-1.3-5.6-3.6 0-2 2.3-3.6 5.2-3.6 3-.3 5.6 1.3 5.6 3.6zm-31.1-4.5c-.7 2 1.3 4.3 4.3 4.9 2.6 1 5.6 0 6.2-2s-1.3-4.3-4.3-5.2c-2.6-.7-5.5 .3-6.2 2.3zm44.2-1.7c-2.9 .7-4.9 2.6-4.6 4.9 .3 2 2.9 3.3 5.9 2.6 2.9-.7 4.9-2.6 4.6-4.6-.3-1.9-3-3.2-5.9-2.9zM244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 20-5.6 41.5-8.5 62.8-8.5s42.8 2.9 62.8 8.5c0 0 48.1-33.6 69-27 13.7 34.7 5.2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8zM97.2 352.9c-1.3 1-1 3.3 .7 5.2 1.6 1.6 3.9 2.3 5.2 1 1.3-1 1-3.3-.7-5.2-1.6-1.6-3.9-2.3-5.2-1zm-10.8-8.1c-.7 1.3 .3 2.9 2.3 3.9 1.6 1 3.6 .7 4.3-.7 .7-1.3-.3-2.9-2.3-3.9-2-.6-3.6-.3-4.3 .7zm32.4 35.6c-1.6 1.3-1 4.3 1.3 6.2 2.3 2.3 5.2 2.6 6.5 1 1.3-1.3 .7-4.3-1.3-6.2-2.2-2.3-5.2-2.6-6.5-1zm-11.4-14.7c-1.6 1-1.6 3.6 0 5.9 1.6 2.3 4.3 3.3 5.6 2.3 1.6-1.3 1.6-3.9 0-6.2-1.4-2.3-4-3.3-5.6-2z"
              ></path></svg
            > component
          </a> is updated? Currently, we clear the field. Is that the best UX?
        </p>
        <p>
          Other trade offs are with the dependencies we use. Do we build the
          input mask and formatter by hand? I've decided to use a dependency for
          input masking, formatting, and the custom select menu. These
          dependencies come with their own problems. For instance, the <code
            >react-select</code
          > dependency comes styled. I had to use the <code>unstyled</code> prop,
          and write CSS based on the class names from <code>react-select</code>.
          There's also a bug with being able to change the <code
            >DownChevron</code
          > that has been open now for years on GitHub.
        </p>
        <p>
          As a prototype of this being built in React, I'm pleased. For
          production, I would go deeper into the pros and cons of using these
          depenedencies, look for more options, and read into what other
          community members have done in the past.
        </p>
      </div>
    </div>
  </section>
</InnerLayout>
